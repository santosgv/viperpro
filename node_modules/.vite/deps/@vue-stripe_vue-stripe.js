import {
  __commonJS
} from "./chunk-HM4MQYWN.js";

// node_modules/@vue-stripe/vue-stripe/package.json
var require_package = __commonJS({
  "node_modules/@vue-stripe/vue-stripe/package.json"(exports, module) {
    module.exports = {
      name: "@vue-stripe/vue-stripe",
      version: "4.5.0",
      description: "Stripe Checkout & Elements for Vue.js",
      author: "jofftiquez@gmail.com",
      scripts: {
        build: "rollup -c",
        lint: "vue-cli-service lint --fix",
        prebuild: "rimraf dist",
        test: "jest"
      },
      main: "dist/index.js",
      module: "dist",
      dependencies: {
        "@stripe/stripe-js": "^1.13.2",
        "vue-coerce-props": "^1.0.0"
      },
      devDependencies: {
        "@babel/cli": "^7.7.5",
        "@babel/core": "^7.7.5",
        "@babel/plugin-proposal-export-default-from": "^7.7.4",
        "@babel/plugin-proposal-optional-chaining": "^7.10.4",
        "@babel/plugin-transform-runtime": "^7.7.5",
        "@babel/preset-env": "^7.7.5",
        "@babel/preset-es2015": "^7.0.0-beta.53",
        "@babel/runtime": "^7.7.5",
        "@rollup/plugin-node-resolve": "^6.0.0",
        "@vue/cli-plugin-eslint": "~4.5.0",
        "@vue/cli-service": "^4.5.10",
        "@vue/eslint-config-standard": "^5.1.2",
        "babel-eslint": "^10.1.0",
        "babel-minify": "^0.5.1",
        "cross-env": "^6.0.3",
        eslint: "^6.8.0",
        "eslint-plugin-import": "^2.20.2",
        "eslint-plugin-node": "^11.1.0",
        "eslint-plugin-promise": "^4.2.1",
        "eslint-plugin-standard": "^4.0.0",
        "eslint-plugin-vue": "^6.2.2",
        jest: "^24.9.0",
        "lint-staged": "^9.5.0",
        rimraf: "^3.0.0",
        rollup: "^1.27.9",
        "rollup-plugin-babel": "^4.3.3",
        "rollup-plugin-commonjs": "^10.1.0",
        "rollup-plugin-postcss": "^2.0.3",
        "rollup-plugin-terser": "^5.1.3",
        "rollup-plugin-uglify": "^6.0.3",
        "rollup-plugin-vue": "^5.1.4",
        "vue-template-compiler": "^2.6.11"
      },
      bugs: {
        url: "https://github.com/vue-stripe/vue-stripe/issues"
      },
      gitHooks: {
        "pre-commit": "lint-staged"
      },
      homepage: "https://github.com/vue-stripe/vue-stripe#readme",
      keywords: [
        "vue",
        "vuejs",
        "stripe",
        "checkout",
        "payment"
      ],
      license: "MIT",
      "lint-staged": {
        "*.{js,jsx,vue}": [
          "vue-cli-service lint",
          "git add"
        ]
      },
      repository: {
        type: "git",
        url: "git@github.com:vue-stripe/vue-stripe.git"
      },
      typings: "typings/index.d.ts"
    };
  }
});

// node_modules/@vue-stripe/vue-stripe/dist/index.js
var require_dist = __commonJS({
  "node_modules/@vue-stripe/vue-stripe/dist/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    var DEFAULT_LOCALE = "auto";
    var SUPPORTED_LOCALES = ["auto", "bg", "cs", "da", "de", "el", "en", "en-GB", "es", "es-419", "et", "fi", "fr", "fr-CA", "hu", "id", "it", "ja", "lt", "lv", "ms", "mt", "nb", "nl", "pl", "pt", "pt-BR", "ro", "ru", "sk", "sl", "sv", "tr", "zh", "zh-HK", "zh-TW"];
    var SUPPORTED_SUBMIT_TYPES = ["auto", "book", "donate", "pay"];
    var BILLING_ADDRESS_COLLECTION_TYPES = ["required", "auto"];
    var DEFAULT_ELEMENT_STYLE = { base: { color: "#32325d", fontFamily: '"Helvetica Neue", Helvetica, sans-serif', fontSmoothing: "antialiased", fontSize: "16px", "::placeholder": { color: "#aab7c4" } }, invalid: { color: "#fa755a", iconColor: "#fa755a" } };
    var VUE_STRIPE_VERSION = require_package().version;
    var STRIPE_PARTNER_DETAILS = { name: "vue-stripe", version: VUE_STRIPE_VERSION, url: "https://vuestripe.com", partner_id: "pp_partner_IqtOXpBSuz0IE2" };
    var index = { install: function(e, n) {
      var t = n.pk, r = n.stripeAccount, i = n.apiVersion, o = n.locale, s = window.Stripe(t, { stripeAccount: r, apiVersion: i, locale: o });
      s.registerAppInfo(STRIPE_PARTNER_DETAILS), e.prototype.$stripe = s;
    } };
    function createCommonjsModule(e, n) {
      return e(n = { exports: {} }, n.exports), n.exports;
    }
    var runtime_1 = createCommonjsModule(function(e) {
      var n = function(e2) {
        var n2, t = Object.prototype, r = t.hasOwnProperty, i = "function" == typeof Symbol ? Symbol : {}, o = i.iterator || "@@iterator", s = i.asyncIterator || "@@asyncIterator", a = i.toStringTag || "@@toStringTag";
        function l(e3, n3, t2, r2) {
          var i2 = n3 && n3.prototype instanceof f ? n3 : f, o2 = Object.create(i2.prototype), s2 = new T(r2 || []);
          return o2._invoke = function(e4, n4, t3) {
            var r3 = d;
            return function(i3, o3) {
              if (r3 === u)
                throw new Error("Generator is already running");
              if (r3 === m) {
                if ("throw" === i3)
                  throw o3;
                return O();
              }
              for (t3.method = i3, t3.arg = o3; ; ) {
                var s3 = t3.delegate;
                if (s3) {
                  var a2 = w(s3, t3);
                  if (a2) {
                    if (a2 === h)
                      continue;
                    return a2;
                  }
                }
                if ("next" === t3.method)
                  t3.sent = t3._sent = t3.arg;
                else if ("throw" === t3.method) {
                  if (r3 === d)
                    throw r3 = m, t3.arg;
                  t3.dispatchException(t3.arg);
                } else
                  "return" === t3.method && t3.abrupt("return", t3.arg);
                r3 = u;
                var l2 = c(e4, n4, t3);
                if ("normal" === l2.type) {
                  if (r3 = t3.done ? m : p, l2.arg === h)
                    continue;
                  return { value: l2.arg, done: t3.done };
                }
                "throw" === l2.type && (r3 = m, t3.method = "throw", t3.arg = l2.arg);
              }
            };
          }(e3, t2, s2), o2;
        }
        function c(e3, n3, t2) {
          try {
            return { type: "normal", arg: e3.call(n3, t2) };
          } catch (e4) {
            return { type: "throw", arg: e4 };
          }
        }
        e2.wrap = l;
        var d = "suspendedStart", p = "suspendedYield", u = "executing", m = "completed", h = {};
        function f() {
        }
        function y() {
        }
        function v() {
        }
        var g = {};
        g[o] = function() {
          return this;
        };
        var _ = Object.getPrototypeOf, E = _ && _(_(x([])));
        E && E !== t && r.call(E, o) && (g = E);
        var S = v.prototype = f.prototype = Object.create(g);
        function b(e3) {
          ["next", "throw", "return"].forEach(function(n3) {
            e3[n3] = function(e4) {
              return this._invoke(n3, e4);
            };
          });
        }
        function A(e3) {
          var n3;
          this._invoke = function(t2, i2) {
            function o2() {
              return new Promise(function(n4, o3) {
                !function n5(t3, i3, o4, s2) {
                  var a2 = c(e3[t3], e3, i3);
                  if ("throw" !== a2.type) {
                    var l2 = a2.arg, d2 = l2.value;
                    return d2 && "object" == typeof d2 && r.call(d2, "__await") ? Promise.resolve(d2.__await).then(function(e4) {
                      n5("next", e4, o4, s2);
                    }, function(e4) {
                      n5("throw", e4, o4, s2);
                    }) : Promise.resolve(d2).then(function(e4) {
                      l2.value = e4, o4(l2);
                    }, function(e4) {
                      return n5("throw", e4, o4, s2);
                    });
                  }
                  s2(a2.arg);
                }(t2, i2, n4, o3);
              });
            }
            return n3 = n3 ? n3.then(o2, o2) : o2();
          };
        }
        function w(e3, t2) {
          var r2 = e3.iterator[t2.method];
          if (r2 === n2) {
            if (t2.delegate = null, "throw" === t2.method) {
              if (e3.iterator.return && (t2.method = "return", t2.arg = n2, w(e3, t2), "throw" === t2.method))
                return h;
              t2.method = "throw", t2.arg = new TypeError("The iterator does not provide a 'throw' method");
            }
            return h;
          }
          var i2 = c(r2, e3.iterator, t2.arg);
          if ("throw" === i2.type)
            return t2.method = "throw", t2.arg = i2.arg, t2.delegate = null, h;
          var o2 = i2.arg;
          return o2 ? o2.done ? (t2[e3.resultName] = o2.value, t2.next = e3.nextLoc, "return" !== t2.method && (t2.method = "next", t2.arg = n2), t2.delegate = null, h) : o2 : (t2.method = "throw", t2.arg = new TypeError("iterator result is not an object"), t2.delegate = null, h);
        }
        function C(e3) {
          var n3 = { tryLoc: e3[0] };
          1 in e3 && (n3.catchLoc = e3[1]), 2 in e3 && (n3.finallyLoc = e3[2], n3.afterLoc = e3[3]), this.tryEntries.push(n3);
        }
        function P(e3) {
          var n3 = e3.completion || {};
          n3.type = "normal", delete n3.arg, e3.completion = n3;
        }
        function T(e3) {
          this.tryEntries = [{ tryLoc: "root" }], e3.forEach(C, this), this.reset(true);
        }
        function x(e3) {
          if (e3) {
            var t2 = e3[o];
            if (t2)
              return t2.call(e3);
            if ("function" == typeof e3.next)
              return e3;
            if (!isNaN(e3.length)) {
              var i2 = -1, s2 = function t3() {
                for (; ++i2 < e3.length; )
                  if (r.call(e3, i2))
                    return t3.value = e3[i2], t3.done = false, t3;
                return t3.value = n2, t3.done = true, t3;
              };
              return s2.next = s2;
            }
          }
          return { next: O };
        }
        function O() {
          return { value: n2, done: true };
        }
        return y.prototype = S.constructor = v, v.constructor = y, v[a] = y.displayName = "GeneratorFunction", e2.isGeneratorFunction = function(e3) {
          var n3 = "function" == typeof e3 && e3.constructor;
          return !!n3 && (n3 === y || "GeneratorFunction" === (n3.displayName || n3.name));
        }, e2.mark = function(e3) {
          return Object.setPrototypeOf ? Object.setPrototypeOf(e3, v) : (e3.__proto__ = v, a in e3 || (e3[a] = "GeneratorFunction")), e3.prototype = Object.create(S), e3;
        }, e2.awrap = function(e3) {
          return { __await: e3 };
        }, b(A.prototype), A.prototype[s] = function() {
          return this;
        }, e2.AsyncIterator = A, e2.async = function(n3, t2, r2, i2) {
          var o2 = new A(l(n3, t2, r2, i2));
          return e2.isGeneratorFunction(t2) ? o2 : o2.next().then(function(e3) {
            return e3.done ? e3.value : o2.next();
          });
        }, b(S), S[a] = "Generator", S[o] = function() {
          return this;
        }, S.toString = function() {
          return "[object Generator]";
        }, e2.keys = function(e3) {
          var n3 = [];
          for (var t2 in e3)
            n3.push(t2);
          return n3.reverse(), function t3() {
            for (; n3.length; ) {
              var r2 = n3.pop();
              if (r2 in e3)
                return t3.value = r2, t3.done = false, t3;
            }
            return t3.done = true, t3;
          };
        }, e2.values = x, T.prototype = { constructor: T, reset: function(e3) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = n2, this.done = false, this.delegate = null, this.method = "next", this.arg = n2, this.tryEntries.forEach(P), !e3)
            for (var t2 in this)
              "t" === t2.charAt(0) && r.call(this, t2) && !isNaN(+t2.slice(1)) && (this[t2] = n2);
        }, stop: function() {
          this.done = true;
          var e3 = this.tryEntries[0].completion;
          if ("throw" === e3.type)
            throw e3.arg;
          return this.rval;
        }, dispatchException: function(e3) {
          if (this.done)
            throw e3;
          var t2 = this;
          function i2(r2, i3) {
            return a2.type = "throw", a2.arg = e3, t2.next = r2, i3 && (t2.method = "next", t2.arg = n2), !!i3;
          }
          for (var o2 = this.tryEntries.length - 1; o2 >= 0; --o2) {
            var s2 = this.tryEntries[o2], a2 = s2.completion;
            if ("root" === s2.tryLoc)
              return i2("end");
            if (s2.tryLoc <= this.prev) {
              var l2 = r.call(s2, "catchLoc"), c2 = r.call(s2, "finallyLoc");
              if (l2 && c2) {
                if (this.prev < s2.catchLoc)
                  return i2(s2.catchLoc, true);
                if (this.prev < s2.finallyLoc)
                  return i2(s2.finallyLoc);
              } else if (l2) {
                if (this.prev < s2.catchLoc)
                  return i2(s2.catchLoc, true);
              } else {
                if (!c2)
                  throw new Error("try statement without catch or finally");
                if (this.prev < s2.finallyLoc)
                  return i2(s2.finallyLoc);
              }
            }
          }
        }, abrupt: function(e3, n3) {
          for (var t2 = this.tryEntries.length - 1; t2 >= 0; --t2) {
            var i2 = this.tryEntries[t2];
            if (i2.tryLoc <= this.prev && r.call(i2, "finallyLoc") && this.prev < i2.finallyLoc) {
              var o2 = i2;
              break;
            }
          }
          o2 && ("break" === e3 || "continue" === e3) && o2.tryLoc <= n3 && n3 <= o2.finallyLoc && (o2 = null);
          var s2 = o2 ? o2.completion : {};
          return s2.type = e3, s2.arg = n3, o2 ? (this.method = "next", this.next = o2.finallyLoc, h) : this.complete(s2);
        }, complete: function(e3, n3) {
          if ("throw" === e3.type)
            throw e3.arg;
          return "break" === e3.type || "continue" === e3.type ? this.next = e3.arg : "return" === e3.type ? (this.rval = this.arg = e3.arg, this.method = "return", this.next = "end") : "normal" === e3.type && n3 && (this.next = n3), h;
        }, finish: function(e3) {
          for (var n3 = this.tryEntries.length - 1; n3 >= 0; --n3) {
            var t2 = this.tryEntries[n3];
            if (t2.finallyLoc === e3)
              return this.complete(t2.completion, t2.afterLoc), P(t2), h;
          }
        }, catch: function(e3) {
          for (var n3 = this.tryEntries.length - 1; n3 >= 0; --n3) {
            var t2 = this.tryEntries[n3];
            if (t2.tryLoc === e3) {
              var r2 = t2.completion;
              if ("throw" === r2.type) {
                var i2 = r2.arg;
                P(t2);
              }
              return i2;
            }
          }
          throw new Error("illegal catch attempt");
        }, delegateYield: function(e3, t2, r2) {
          return this.delegate = { iterator: x(e3), resultName: t2, nextLoc: r2 }, "next" === this.method && (this.arg = n2), h;
        } }, e2;
      }(e.exports);
      try {
        regeneratorRuntime = n;
      } catch (e2) {
        Function("r", "regeneratorRuntime = r")(n);
      }
    });
    var regenerator = runtime_1;
    function _typeof(e) {
      return (_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
        return typeof e2;
      } : function(e2) {
        return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
      })(e);
    }
    var loadParams;
    var V3_URL = "https://js.stripe.com/v3";
    var V3_URL_REGEX = /^https:\/\/js\.stripe\.com\/v3\/?(\?.*)?$/;
    var EXISTING_SCRIPT_MESSAGE = "loadStripe.setLoadParameters was called but an existing Stripe.js script already exists in the document; existing script parameters will be used";
    var findScript = function() {
      for (var e = document.querySelectorAll('script[src^="'.concat(V3_URL, '"]')), n = 0; n < e.length; n++) {
        var t = e[n];
        if (V3_URL_REGEX.test(t.src))
          return t;
      }
      return null;
    };
    var injectScript = function(e) {
      var n = e && !e.advancedFraudSignals ? "?advancedFraudSignals=false" : "", t = document.createElement("script");
      t.src = "".concat(V3_URL).concat(n);
      var r = document.head || document.body;
      if (!r)
        throw new Error("Expected document.body not to be null. Stripe.js requires a <body> element.");
      return r.appendChild(t), t;
    };
    var registerWrapper = function(e, n) {
      e && e._registerWrapper && e._registerWrapper({ name: "stripe-js", version: "1.13.2", startTime: n });
    };
    var stripePromise = null;
    var loadScript = function(e) {
      return null !== stripePromise ? stripePromise : stripePromise = new Promise(function(n, t) {
        if ("undefined" != typeof window)
          if (window.Stripe && e && console.warn(EXISTING_SCRIPT_MESSAGE), window.Stripe)
            n(window.Stripe);
          else
            try {
              var r = findScript();
              r && e ? console.warn(EXISTING_SCRIPT_MESSAGE) : r || (r = injectScript(e)), r.addEventListener("load", function() {
                window.Stripe ? n(window.Stripe) : t(new Error("Stripe.js not available"));
              }), r.addEventListener("error", function() {
                t(new Error("Failed to load Stripe.js"));
              });
            } catch (e2) {
              return void t(e2);
            }
        else
          n(null);
      });
    };
    var initStripe = function(e, n, t) {
      if (null === e)
        return null;
      var r = e.apply(void 0, n);
      return registerWrapper(r, t), r;
    };
    var validateLoadParams = function(e) {
      var n = "invalid load parameters; expected object of shape\n\n    {advancedFraudSignals: boolean}\n\nbut received\n\n    ".concat(JSON.stringify(e), "\n");
      if (null === e || "object" !== _typeof(e))
        throw new Error(n);
      if (1 === Object.keys(e).length && "boolean" == typeof e.advancedFraudSignals)
        return e;
      throw new Error(n);
    };
    var loadStripeCalled = false;
    var loadStripe = function() {
      for (var e = arguments.length, n = new Array(e), t = 0; t < e; t++)
        n[t] = arguments[t];
      loadStripeCalled = true;
      var r = Date.now();
      return loadScript(loadParams).then(function(e2) {
        return initStripe(e2, n, r);
      });
    };
    loadStripe.setLoadParameters = function(e) {
      if (loadStripeCalled)
        throw new Error("You cannot change load parameters after calling loadStripe");
      loadParams = validateLoadParams(e);
    };
    var index$1 = { beforeCreate: function() {
      var e = this.$options.props;
      e && (this._$coertions = Object.keys(e).filter(function(n) {
        return e[n].coerce;
      }).map(function(n) {
        return [n, e[n].coerce];
      }));
    }, computed: { $coerced: function() {
      var e = this;
      return this._$coertions.reduce(function(n, t) {
        var r = t[0], i = t[1];
        return n[r] = i.call(e, e.$props[r]), n;
      }, {});
    } } };
    var props = { pk: { type: String, required: true }, mode: { type: String, validator: function(e) {
      return ["payment", "subscription"].includes(e);
    } }, lineItems: { type: Array, default: void 0 }, items: { type: Array }, successUrl: { type: String, default: window.location.href }, cancelUrl: { type: String, default: window.location.href }, submitType: { type: String, validator: function(e) {
      return SUPPORTED_SUBMIT_TYPES.includes(e);
    } }, billingAddressCollection: { type: String, default: "auto", validator: function(e) {
      return BILLING_ADDRESS_COLLECTION_TYPES.includes(e);
    } }, clientReferenceId: { type: String }, customerEmail: { type: String }, sessionId: { type: String }, stripeAccount: { type: String, default: void 0 }, apiVersion: { type: String, default: void 0 }, locale: { type: String, default: DEFAULT_LOCALE, coerce: function(e) {
      return SUPPORTED_LOCALES.includes(e) ? e : (console.warn("VueStripe Warning: '".concat(e, "' is not supported by Stripe yet. Falling back to default '").concat(DEFAULT_LOCALE, "'.")), DEFAULT_LOCALE);
    } }, shippingAddressCollection: { type: Object, validator: function(e) {
      return Object.prototype.hasOwnProperty.call(e, "allowedCountries");
    } }, disableAdvancedFraudDetection: { type: Boolean }, stripeOptions: { type: Object, default: null } };
    var index$2 = { props, mixins: [index$1], render: function(e) {
      return e;
    }, methods: { redirectToCheckout: function() {
      var e, n, t;
      return regenerator.async(function(r) {
        for (; ; )
          switch (r.prev = r.next) {
            case 0:
              return r.prev = 0, this.$emit("loading", true), this.disableAdvancedFraudDetection && loadStripe.setLoadParameters({ advancedFraudSignals: false }), e = { stripeAccount: this.stripeAccount, apiVersion: this.apiVersion, locale: this.locale }, r.next = 6, regenerator.awrap(loadStripe(this.pk, e));
            case 6:
              if ((n = r.sent).registerAppInfo(STRIPE_PARTNER_DETAILS), !this.sessionId) {
                r.next = 11;
                break;
              }
              return n.redirectToCheckout({ sessionId: this.sessionId }), r.abrupt("return");
            case 11:
              if (!this.lineItems || !this.lineItems.length || this.mode) {
                r.next = 14;
                break;
              }
              return console.error("Error: Property 'mode' is required when using 'lineItems'. See https://stripe.com/docs/js/checkout/redirect_to_checkout#stripe_checkout_redirect_to_checkout-options-mode"), r.abrupt("return");
            case 14:
              return t = { billingAddressCollection: this.billingAddressCollection, cancelUrl: this.cancelUrl, clientReferenceId: this.clientReferenceId, customerEmail: this.customerEmail, items: this.items, lineItems: this.lineItems, locale: this.$coerced.locale, mode: this.mode, shippingAddressCollection: this.shippingAddressCollection, submitType: this.submitType, successUrl: this.successUrl }, r.abrupt("return", n.redirectToCheckout(t));
            case 18:
              r.prev = 18, r.t0 = r.catch(0), console.error(r.t0), this.$emit("error", r.t0);
            case 22:
            case "end":
              return r.stop();
          }
      }, null, this, [[0, 18]]);
    } } };
    function _defineProperty(e, n, t) {
      return n in e ? Object.defineProperty(e, n, { value: t, enumerable: true, configurable: true, writable: true }) : e[n] = t, e;
    }
    var defineProperty = _defineProperty;
    function ownKeys(e, n) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var r = Object.getOwnPropertySymbols(e);
        n && (r = r.filter(function(n2) {
          return Object.getOwnPropertyDescriptor(e, n2).enumerable;
        })), t.push.apply(t, r);
      }
      return t;
    }
    function _objectSpread(e) {
      for (var n = 1; n < arguments.length; n++) {
        var t = null != arguments[n] ? arguments[n] : {};
        n % 2 ? ownKeys(Object(t), true).forEach(function(n2) {
          defineProperty(e, n2, t[n2]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(n2) {
          Object.defineProperty(e, n2, Object.getOwnPropertyDescriptor(t, n2));
        });
      }
      return e;
    }
    var ELEMENT_TYPE = "card";
    var script = { props: { pk: { type: String, required: true }, testMode: { type: Boolean, default: false }, stripeAccount: { type: String, default: void 0 }, apiVersion: { type: String, default: void 0 }, locale: { type: String, default: "auto" }, elementsOptions: { type: Object, default: function() {
      return {};
    } }, tokenData: { type: Object, default: function() {
      return {};
    } }, disableAdvancedFraudDetection: { type: Boolean }, classes: { type: Object, default: function() {
      return {};
    } }, elementStyle: { type: Object, default: function() {
      return DEFAULT_ELEMENT_STYLE;
    } }, value: { type: String, default: void 0 }, hidePostalCode: Boolean, iconStyle: { type: String, default: "default", validator: function(e) {
      return ["solid", "default"].includes(e);
    } }, hideIcon: Boolean, disabled: Boolean }, data: function() {
      return { loading: false, stripe: null, elements: null, element: null, card: null };
    }, computed: { form: function() {
      return document.getElementById("stripe-element-form");
    } }, mounted: function() {
      var e, n, t = this;
      return regenerator.async(function(r) {
        for (; ; )
          switch (r.prev = r.next) {
            case 0:
              return this.disableAdvancedFraudDetection && loadStripe.setLoadParameters({ advancedFraudSignals: false }), e = { stripeAccount: this.stripeAccount, apiVersion: this.apiVersion, locale: this.locale }, n = { classes: this.classes, style: this.elementStyle, value: this.value, hidePostalCode: this.hidePostalCode, iconStyle: this.iconStyle, hideIcon: this.hideIcon, disabled: this.disabled }, r.next = 5, regenerator.awrap(loadStripe(this.pk, e));
            case 5:
              this.stripe = r.sent, this.stripe.registerAppInfo(STRIPE_PARTNER_DETAILS), this.elements = this.stripe.elements(this.elementsOptions), this.element = this.elements.create(ELEMENT_TYPE, n), this.element.mount("#stripe-element-mount-point"), this.element.on("change", function(e2) {
                var n2 = document.getElementById("stripe-element-errors");
                e2.error ? n2.textContent = e2.error.message : n2.textContent = "", t.onChange(e2);
              }), this.element.on("blur", this.onBlur), this.element.on("click", this.onClick), this.element.on("escape", this.onEscape), this.element.on("focus", this.onFocus), this.element.on("ready", this.onReady), this.form.addEventListener("submit", function(e2) {
                var n2, r2, i, o;
                return regenerator.async(function(s) {
                  for (; ; )
                    switch (s.prev = s.next) {
                      case 0:
                        return s.prev = 0, t.$emit("loading", true), e2.preventDefault(), n2 = _objectSpread({}, t.element), t.amount && (n2.amount = t.amount), s.next = 7, regenerator.awrap(t.stripe.createToken(n2, t.tokenData));
                      case 7:
                        if (r2 = s.sent, i = r2.token, !(o = r2.error)) {
                          s.next = 15;
                          break;
                        }
                        return document.getElementById("stripe-element-errors").textContent = o.message, t.$emit("error", o), s.abrupt("return");
                      case 15:
                        t.$emit("token", i), s.next = 22;
                        break;
                      case 18:
                        s.prev = 18, s.t0 = s.catch(0), console.error(s.t0), t.$emit("error", s.t0);
                      case 22:
                        return s.prev = 22, t.$emit("loading", false), s.finish(22);
                      case 25:
                      case "end":
                        return s.stop();
                    }
                }, null, null, [[0, 18, 22, 25]]);
              });
            case 17:
            case "end":
              return r.stop();
          }
      }, null, this);
    }, methods: { submit: function() {
      this.$refs.submitButtonRef.click();
    }, clear: function() {
      this.element.clear();
    }, destroy: function() {
      this.element.destroy();
    }, focus: function() {
      console.warn("This method will currently not work on iOS 13+ due to a system limitation."), this.element.focus();
    }, unmount: function() {
      this.element.unmount();
    }, update: function(e) {
      this.element.update(e);
    }, onChange: function(e) {
      this.$emit("element-change", e);
    }, onReady: function(e) {
      this.$emit("element-ready", e);
    }, onFocus: function(e) {
      this.$emit("element-focus", e);
    }, onBlur: function(e) {
      this.$emit("element-blur", e);
    }, onEscape: function(e) {
      this.$emit("element-escape", e);
    }, onClick: function(e) {
      this.$emit("element-click", e);
    } } };
    function normalizeComponent(e, n, t, r, i, o, s, a, l, c) {
      "boolean" != typeof s && (l = a, a = s, s = false);
      const d = "function" == typeof t ? t.options : t;
      let p;
      if (e && e.render && (d.render = e.render, d.staticRenderFns = e.staticRenderFns, d._compiled = true, i && (d.functional = true)), r && (d._scopeId = r), o ? (p = function(e2) {
        (e2 = e2 || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) || "undefined" == typeof __VUE_SSR_CONTEXT__ || (e2 = __VUE_SSR_CONTEXT__), n && n.call(this, l(e2)), e2 && e2._registeredComponents && e2._registeredComponents.add(o);
      }, d._ssrRegister = p) : n && (p = s ? function(e2) {
        n.call(this, c(e2, this.$root.$options.shadowRoot));
      } : function(e2) {
        n.call(this, a(e2));
      }), p)
        if (d.functional) {
          const e2 = d.render;
          d.render = function(n2, t2) {
            return p.call(t2), e2(n2, t2);
          };
        } else {
          const e2 = d.beforeCreate;
          d.beforeCreate = e2 ? [].concat(e2, p) : [p];
        }
      return t;
    }
    var isOldIE = "undefined" != typeof navigator && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    function createInjector(e) {
      return (e2, n) => addStyle(e2, n);
    }
    var HEAD;
    var styles = {};
    function addStyle(e, n) {
      const t = isOldIE ? n.media || "default" : e, r = styles[t] || (styles[t] = { ids: /* @__PURE__ */ new Set(), styles: [] });
      if (!r.ids.has(e)) {
        r.ids.add(e);
        let t2 = n.source;
        if (n.map && (t2 += "\n/*# sourceURL=" + n.map.sources[0] + " */", t2 += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(n.map)))) + " */"), r.element || (r.element = document.createElement("style"), r.element.type = "text/css", n.media && r.element.setAttribute("media", n.media), void 0 === HEAD && (HEAD = document.head || document.getElementsByTagName("head")[0]), HEAD.appendChild(r.element)), "styleSheet" in r.element)
          r.styles.push(t2), r.element.styleSheet.cssText = r.styles.filter(Boolean).join("\n");
        else {
          const e2 = r.ids.size - 1, n2 = document.createTextNode(t2), i = r.element.childNodes;
          i[e2] && r.element.removeChild(i[e2]), i.length ? r.element.insertBefore(n2, i[e2]) : r.element.appendChild(n2);
        }
      }
    }
    var __vue_script__ = script;
    var __vue_render__ = function() {
      var e = this.$createElement, n = this._self._c || e;
      return n("div", [n("form", { attrs: { id: "stripe-element-form" } }, [n("div", { attrs: { id: "stripe-element-mount-point" } }), this._v(" "), this._t("stripe-element-errors", [n("div", { attrs: { id: "stripe-element-errors", role: "alert" } })]), this._v(" "), n("button", { ref: "submitButtonRef", staticClass: "hide", attrs: { type: "submit" } })], 2)]);
    };
    var __vue_staticRenderFns__ = [];
    __vue_render__._withStripped = true;
    var __vue_inject_styles__ = function(e) {
      e && e("data-v-4dd8360e_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The CSS shown here will not be introduced in the Quickstart guide, but shows\n * how you can use CSS to style your Element's container.\n */\n.StripeElement[data-v-4dd8360e] {\n  box-sizing: border-box;\n\n  height: 40px;\n\n  padding: 10px 12px;\n\n  border: 1px solid transparent;\n  border-radius: 4px;\n  background-color: white;\n\n  box-shadow: 0 1px 3px 0 #e6ebf1;\n  -webkit-transition: box-shadow 150ms ease;\n  transition: box-shadow 150ms ease;\n}\n.StripeElement--focus[data-v-4dd8360e] {\n  box-shadow: 0 1px 3px 0 #cfd7df;\n}\n.StripeElement--invalid[data-v-4dd8360e] {\n  border-color: #fa755a;\n}\n.StripeElement--webkit-autofill[data-v-4dd8360e] {\n  background-color: #fefde5 !important;\n}\n.hide[data-v-4dd8360e] {\n  display: none;\n}\n", map: { version: 3, sources: ["/home/runner/work/vue-stripe/vue-stripe/src/elements/Card.vue"], names: [], mappings: ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsPA;;;EAGA;AACA;EACA,sBAAA;;EAEA,YAAA;;EAEA,kBAAA;;EAEA,6BAAA;EACA,kBAAA;EACA,uBAAA;;EAEA,+BAAA;EACA,yCAAA;EACA,iCAAA;AACA;AAEA;EACA,+BAAA;AACA;AAEA;EACA,qBAAA;AACA;AAEA;EACA,oCAAA;AACA;AAEA;EACA,aAAA;AACA", file: "Card.vue", sourcesContent: [`<template>
  <div>
    <form id="stripe-element-form">
      <div id="stripe-element-mount-point" />
      <slot name="stripe-element-errors">
        <div
          id="stripe-element-errors"
          role="alert"
        />
      </slot>
      <button
        ref="submitButtonRef"
        type="submit"
        class="hide"
      />
    </form>
  </div>
</template>

<script>
import { loadStripe } from '@stripe/stripe-js/dist/pure.esm.js';
// import { isSecureHost } from '../utils';
import {
  DEFAULT_ELEMENT_STYLE,
  STRIPE_PARTNER_DETAILS,
  // INSECURE_HOST_ERROR_MESSAGE,
} from '../constants';
const ELEMENT_TYPE = 'card';
export default {
  props: {
    pk: {
      type: String,
      required: true,
    },
    testMode: {
      type: Boolean,
      default: false,
    },
    stripeAccount: {
      type: String,
      default: undefined,
    },
    apiVersion: {
      type: String,
      default: undefined,
    },
    locale: {
      type: String,
      default: 'auto',
    },
    elementsOptions: {
      type: Object,
      default: () => ({}),
    },
    tokenData: {
      type: Object,
      default: () => ({}),
    },
    disableAdvancedFraudDetection: {
      type: Boolean,
    },
    // element specific options
    classes: {
      type: Object,
      default: () => ({}),
    },
    elementStyle: {
      type: Object,
      default: () => (DEFAULT_ELEMENT_STYLE),
    },
    value: {
      type: String,
      default: undefined,
    },
    hidePostalCode: Boolean,
    iconStyle: {
      type: String,
      default: 'default',
      validator: value => ['solid', 'default'].includes(value),
    },
    hideIcon: Boolean,
    disabled: Boolean,
  },
  data () {
    return {
      loading: false,
      stripe: null,
      elements: null,
      element: null,
      card: null,
    };
  },
  computed: {
    form () {
      return document.getElementById('stripe-element-form');
    },
  },
  async mounted () {
    // FIXME: temporarily remove to avoid problems with remote non-production deployments
    // if (!isSecureHost(this.testMode)) {
    //   document.getElementById('stripe-element-mount-point').innerHTML = \`<p style="color: red">\${INSECURE_HOST_ERROR_MESSAGE}</p>\`;
    //   return;
    // }

    if (this.disableAdvancedFraudDetection) loadStripe.setLoadParameters({ advancedFraudSignals: false });

    const stripeOptions = {
      stripeAccount: this.stripeAccount,
      apiVersion: this.apiVersion,
      locale: this.locale,
    };
    const createOptions = {
      classes: this.classes,
      style: this.elementStyle,
      value: this.value,
      hidePostalCode: this.hidePostalCode,
      iconStyle: this.iconStyle,
      hideIcon: this.hideIcon,
      disabled: this.disabled,
    };

    this.stripe = await loadStripe(this.pk, stripeOptions);
    this.stripe.registerAppInfo(STRIPE_PARTNER_DETAILS);
    this.elements = this.stripe.elements(this.elementsOptions);
    this.element = this.elements.create(ELEMENT_TYPE, createOptions);
    this.element.mount('#stripe-element-mount-point');

    this.element.on('change', (event) => {
      var displayError = document.getElementById('stripe-element-errors');
      if (event.error) {
        displayError.textContent = event.error.message;
      } else {
        displayError.textContent = '';
      }
      this.onChange(event);
    });

    this.element.on('blur', this.onBlur);
    this.element.on('click', this.onClick);
    this.element.on('escape', this.onEscape);
    this.element.on('focus', this.onFocus);
    this.element.on('ready', this.onReady);

    this.form.addEventListener('submit', async (event) => {
      try {
        this.$emit('loading', true);
        event.preventDefault();
        const data = {
          ...this.element,
        };
        if (this.amount) data.amount = this.amount;
        const { token, error } = await this.stripe.createToken(data, this.tokenData);
        if (error) {
          const errorElement = document.getElementById('stripe-element-errors');
          errorElement.textContent = error.message;
          this.$emit('error', error);
          return;
        }
        this.$emit('token', token);
      } catch (error) {
        console.error(error);
        this.$emit('error', error);
      } finally {
        this.$emit('loading', false);
      }
    });
  },
  methods: {
    /**
     * Triggers the submission of the form
     * @return {void}
     */
    submit () {
      this.$refs.submitButtonRef.click();
    },
    /**
     * Clears the element
     * @return {void}
     */
    clear () {
      this.element.clear();
    },
    /**
     * Destroys the element
     * @return {void}
     */
    destroy () {
      this.element.destroy();
    },
    /**
     * Focuses on the element
     * @return {void}
     */
    focus () {
      console.warn('This method will currently not work on iOS 13+ due to a system limitation.');
      this.element.focus();
    },
    /**
     * Unmounts the element
     * @return {void}
     */
    unmount () {
      this.element.unmount();
    },
    /**
     * Updates the element
     * @param {string} opts.classes.base The base class applied to the container. Defaults to StripeElement.
     * @param {string} opts.classes.complete The class name to apply when the Element is complete. Defaults to StripeElement--complete.
     * @param {string} opts.classes.empty The class name to apply when the Element is empty. Defaults to StripeElement--empty.
     * @param {string} opts.classes.focus The class name to apply when the Element is focused. Defaults to StripeElement--focus.
     * @param {string} opts.classes.invalid The class name to apply when the Element is invalid. Defaults to StripeElement--invalid.
     * @param {string} opts.classes.webkitAutoFill The class name to apply when the Element has its value autofilled by the browser (only on Chrome and Safari). Defaults to StripeElement--webkit-autofill.
     * @param {Object} opts.style Customize the appearance of this element using CSS properties passed in a Style object.
     * @param {string} opts.value A pre-filled set of values to include in the input (e.g., {postalCode: '94110'}). Note that sensitive card information (card number, CVC, and expiration date) cannot be pre-filled
     * @param {boolean} opts.hidePostalCode Hide the postal code field. Default is false. If you are already collecting a full billing address or postal code elsewhere, set this to true.
     * @param {string} opts.iconStyle Appearance of the icon in the Element. Either solid or default.
     * @param {boolean} opts.hideIcon Hides the icon in the Element. Default is false.
     * @param {boolean} opts.disabled Applies a disabled state to the Element such that user input is not accepted. Default is false.
     */
    update (opts) {
      this.element.update(opts);
    },
    // events
    onChange (e) {
      this.$emit('element-change', e);
    },
    onReady (e) {
      this.$emit('element-ready', e);
    },
    onFocus (e) {
      this.$emit('element-focus', e);
    },
    onBlur (e) {
      this.$emit('element-blur', e);
    },
    onEscape (e) {
      this.$emit('element-escape', e);
    },
    onClick (e) {
      this.$emit('element-click', e);
    },
  },
};
<\/script>

<style scoped>
/**
 * The CSS shown here will not be introduced in the Quickstart guide, but shows
 * how you can use CSS to style your Element's container.
 */
.StripeElement {
  box-sizing: border-box;

  height: 40px;

  padding: 10px 12px;

  border: 1px solid transparent;
  border-radius: 4px;
  background-color: white;

  box-shadow: 0 1px 3px 0 #e6ebf1;
  -webkit-transition: box-shadow 150ms ease;
  transition: box-shadow 150ms ease;
}

.StripeElement--focus {
  box-shadow: 0 1px 3px 0 #cfd7df;
}

.StripeElement--invalid {
  border-color: #fa755a;
}

.StripeElement--webkit-autofill {
  background-color: #fefde5 !important;
}

.hide {
  display: none;
}
</style>
`] }, media: void 0 });
    };
    var __vue_scope_id__ = "data-v-4dd8360e";
    var __vue_component__ = normalizeComponent({ render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ }, __vue_inject_styles__, __vue_script__, __vue_scope_id__, false, void 0, false, createInjector, void 0, void 0);
    var ELEMENT_TYPE$1 = "payment";
    var script$1 = { props: { pk: { type: String, required: true }, testMode: { type: Boolean, default: false }, elementsOptions: { type: Object, required: true, default: function() {
      return {};
    } }, confirmParams: { type: Object, required: true, default: function() {
      return {};
    } }, redirect: { type: String, default: "always" }, createOptions: { type: Object, default: function() {
      return {};
    } }, stripeAccount: { type: String, default: void 0 }, apiVersion: { type: String, default: void 0 }, locale: { type: String, default: "auto" }, disableAdvancedFraudDetection: { type: Boolean } }, data: function() {
      return { loading: false, stripe: null, elements: null, element: null };
    }, computed: { form: function() {
      return document.getElementById("stripe-payment-element-form");
    } }, mounted: function() {
      var e, n = this;
      return regenerator.async(function(t) {
        for (; ; )
          switch (t.prev = t.next) {
            case 0:
              return this.disableAdvancedFraudDetection && loadStripe.setLoadParameters({ advancedFraudSignals: false }), e = { stripeAccount: this.stripeAccount, apiVersion: this.apiVersion, locale: this.locale }, t.next = 4, regenerator.awrap(loadStripe(this.pk, e));
            case 4:
              this.stripe = t.sent, this.stripe.registerAppInfo(STRIPE_PARTNER_DETAILS), this.elements = this.stripe.elements(this.elementsOptions), this.element = this.elements.create(ELEMENT_TYPE$1, this.createOptions), this.element.mount("#stripe-payment-element-mount-point"), this.element.on("change", function(e2) {
                var t2 = document.getElementById("stripe-payment-element-errors");
                e2.error ? t2.textContent = e2.error.message : t2.textContent = "", n.onChange(e2);
              }), this.element.on("blur", this.onBlur), this.element.on("click", this.onClick), this.element.on("escape", this.onEscape), this.element.on("focus", this.onFocus), this.element.on("ready", this.onReady), this.form.addEventListener("submit", function(e2) {
                var t2, r, i;
                return regenerator.async(function(o) {
                  for (; ; )
                    switch (o.prev = o.next) {
                      case 0:
                        return o.prev = 0, n.$emit("loading", true), e2.preventDefault(), o.next = 5, regenerator.awrap(n.stripe.confirmPayment({ elements: n.elements, confirmParams: n.confirmParams, redirect: n.redirect }));
                      case 5:
                        if (t2 = o.sent, r = t2.error, i = t2.paymentIntent, !r) {
                          o.next = 15;
                          break;
                        }
                        return document.getElementById("stripe-payment-element-errors").textContent = r.message, n.$emit("error", r), o.abrupt("return");
                      case 15:
                        i && n.$emit("confirmed", i);
                      case 16:
                        o.next = 22;
                        break;
                      case 18:
                        o.prev = 18, o.t0 = o.catch(0), console.error(o.t0), n.$emit("error", o.t0);
                      case 22:
                        return o.prev = 22, n.$emit("loading", false), o.finish(22);
                      case 25:
                      case "end":
                        return o.stop();
                    }
                }, null, null, [[0, 18, 22, 25]]);
              });
            case 16:
            case "end":
              return t.stop();
          }
      }, null, this);
    }, methods: { submit: function() {
      this.$refs.submitButtonRef.click();
    }, clear: function() {
      this.element.clear();
    }, destroy: function() {
      this.element.destroy();
    }, focus: function() {
      console.warn("This method will currently not work on iOS 13+ due to a system limitation."), this.element.focus();
    }, collapse: function() {
      this.element.collapse();
    }, getElement: function() {
      this.element.getElement();
    }, unmount: function() {
      this.element.unmount();
    }, update: function(e) {
      this.element.update(e);
    }, onChange: function(e) {
      this.$emit("element-change", e);
    }, onReady: function(e) {
      this.$emit("element-ready", e);
    }, onFocus: function(e) {
      this.$emit("element-focus", e);
    }, onBlur: function(e) {
      this.$emit("element-blur", e);
    }, onEscape: function(e) {
      this.$emit("element-escape", e);
    }, onClick: function(e) {
      this.$emit("element-click", e);
    } } };
    var __vue_script__$1 = script$1;
    var __vue_render__$1 = function() {
      var e = this.$createElement, n = this._self._c || e;
      return n("div", [n("form", { attrs: { id: "stripe-payment-element-form" } }, [n("div", { attrs: { id: "stripe-payment-element-mount-point" } }), this._v(" "), this._t("stripe-payment-element-errors", [n("div", { attrs: { id: "stripe-payment-element-errors", role: "alert" } })]), this._v(" "), n("button", { ref: "submitButtonRef", staticClass: "hide", attrs: { type: "submit" } })], 2)]);
    };
    var __vue_staticRenderFns__$1 = [];
    __vue_render__$1._withStripped = true;
    var __vue_inject_styles__$1 = function(e) {
      e && e("data-v-171d7aec_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The CSS shown here will not be introduced in the Quickstart guide, but shows\n * how you can use CSS to style your Element's container.\n */\n.hide[data-v-171d7aec] {\n  display: none;\n}\n", map: { version: 3, sources: ["/home/runner/work/vue-stripe/vue-stripe/src/elements/Payment.vue"], names: [], mappings: ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6QA;;;EAGA;AACA;EACA,aAAA;AACA", file: "Payment.vue", sourcesContent: [`<template>
  <div>
    <form id="stripe-payment-element-form">
      <div id="stripe-payment-element-mount-point" />
      <slot name="stripe-payment-element-errors">
        <div
          id="stripe-payment-element-errors"
          role="alert"
        />
      </slot>
      <button
        ref="submitButtonRef"
        type="submit"
        class="hide"
      />
    </form>
  </div>
</template>

<script>
import { loadStripe } from '@stripe/stripe-js/dist/pure.esm.js';
// import { isSecureHost } from '../utils';
import {
  STRIPE_PARTNER_DETAILS,
  // INSECURE_HOST_ERROR_MESSAGE,
} from '../constants';
const ELEMENT_TYPE = 'payment';
export default {
  props: {
    pk: {
      type: String,
      required: true,
    },
    testMode: {
      type: Boolean,
      default: false,
    },
    elementsOptions: {
      type: Object,
      required: true,
      default: () => ({}),
    },
    confirmParams: {
      type: Object,
      required: true,
      default: () => ({}),
    },
    redirect: {
      type: String,
      default: 'always',
    },
    createOptions: {
      type: Object,
      default: () => ({}),
    },
    stripeAccount: {
      type: String,
      default: undefined,
    },
    apiVersion: {
      type: String,
      default: undefined,
    },
    locale: {
      type: String,
      default: 'auto',
    },
    disableAdvancedFraudDetection: {
      type: Boolean,
    },
  },
  data () {
    return {
      loading: false,
      stripe: null,
      elements: null,
      element: null,
    };
  },
  computed: {
    form () {
      return document.getElementById('stripe-payment-element-form');
    },
  },
  async mounted () {
    // FIXME: temporarily remove to avoid problems with remote non-production deployments
    // if (!isSecureHost(this.testMode)) {
    //   document.getElementById(
    //     'stripe-payment-element-mount-point',
    //   ).innerHTML = \`<p style="color: red">\${INSECURE_HOST_ERROR_MESSAGE}</p>\`;
    //   return;
    // }

    if (this.disableAdvancedFraudDetection) {
      loadStripe.setLoadParameters({ advancedFraudSignals: false });
    }

    const stripeOptions = {
      stripeAccount: this.stripeAccount,
      apiVersion: this.apiVersion,
      locale: this.locale,
    };

    this.stripe = await loadStripe(this.pk, stripeOptions);
    this.stripe.registerAppInfo(STRIPE_PARTNER_DETAILS);

    this.elements = this.stripe.elements(this.elementsOptions);
    this.element = this.elements.create(ELEMENT_TYPE, this.createOptions);
    this.element.mount('#stripe-payment-element-mount-point');

    this.element.on('change', event => {
      var displayError = document.getElementById(
        'stripe-payment-element-errors',
      );
      if (event.error) {
        displayError.textContent = event.error.message;
      } else {
        displayError.textContent = '';
      }
      this.onChange(event);
    });

    this.element.on('blur', this.onBlur);
    this.element.on('click', this.onClick);
    this.element.on('escape', this.onEscape);
    this.element.on('focus', this.onFocus);
    this.element.on('ready', this.onReady);

    this.form.addEventListener('submit', async event => {
      try {
        this.$emit('loading', true);
        event.preventDefault();
        const { error, paymentIntent } = await this.stripe.confirmPayment({
          elements: this.elements,
          confirmParams: this.confirmParams,
          redirect: this.redirect,
        });

        // if the response is an error
        if (error) {
          const errorElement = document.getElementById(
            'stripe-payment-element-errors',
          );
          errorElement.textContent = error.message;
          this.$emit('error', error);
          return;
        } else if (paymentIntent) {
          // if the user has passed prop redirect="if_required"
          // and the payment confirmation was successful
          // and the payment method is not forced to redirect
          // then stripe.confirmPayment resolves with a paymentIntent
          // so we sould pass it back up to the caller for consumption
          // https://stripe.com/docs/js/payment_intents/confirm_payment?type=pii#confirm_payment_intent-options-redirect
          this.$emit('confirmed', paymentIntent);
        }
      } catch (error) {
        console.error(error);
        this.$emit('error', error);
      } finally {
        this.$emit('loading', false);
      }
    });
  },
  methods: {
    /**
     * Triggers the submission of the form
     * @return {void}
     */
    submit () {
      this.$refs.submitButtonRef.click();
    },
    /**
     * Clears the element
     * @return {void}
     */
    clear () {
      this.element.clear();
    },
    /**
     * Destroys the element
     * @return {void}
     */
    destroy () {
      this.element.destroy();
    },
    /**
     * Focuses on the element
     * @return {void}
     */
    focus () {
      console.warn(
        'This method will currently not work on iOS 13+ due to a system limitation.',
      );
      this.element.focus();
    },
    /**
     * Collapses the Payment Element into a row of payment method tabs
     * @return {void}
     */
    collapse () {
      this.element.collapse();
    },
    /**
     * Retrieves a previously created element
     */
    getElement () {
      this.element.getElement();
    },
    /**
     * Unmounts the element
     * @return {void}
     */
    unmount () {
      this.element.unmount();
    },
    /**
     * Updates the element. See official docs for more detail: https://site-admin.stripe.com/docs/js/elements_object/update_payment_element
     * @param {string} opts.business.name  Information about your business that will be displayed in the Payment Element. This information will be retrieved from the Stripe account if not provided.
     * @param {array} opts.paymentMethodOrder Sets order in which payment methods are displayed. Otherwise payment methods are ordered dynamically to optimize for conversion.
     * @param {string | Object} opts.fields.billingDetails The Payment Element automatically creates input fields to collect required billing information for some payment methods like SEPA debit. Specify 'never' to avoid collecting billing details in the Payment Element if you're collecting them outside of the Payment Element.
     * @param {string} opts.fields.billingDetails.name Specify 'never' to avoid collecting a name as part of the billing details in the Payment Element.
     * @param {string} opts.fields.billingDetails.email Specify 'never' to avoid collecting an email address as part of the billing details in the Payment Element.
     * @param {string} opts.fields.billingDetails.phone Specify 'never' to avoid collecting a phone number as part of the billing details in the Payment Element.
     * @param {string | Object} opts.fields.billingDetails.address Specify 'never' to avoid collecting an address as part of the billing details in the Payment Element.
     * @param {string} opts.fields.billingDetails.address.line1 Specify 'never' to avoid collecting an address line1 as part of the billing details in the Payment Element.
     * @param {string} opts.fields.billingDetails.address.line2 Specify 'never' to avoid collecting an address line2 as part of the billing details in the Payment Element.
     * @param {string} opts.fields.billingDetails.address.city Specify 'never' to avoid collecting an address city as part of the billing details in the Payment Element.
     * @param {string} opts.fields.billingDetails.address.state Specify 'never' to avoid collecting an address state as part of the billing details in the Payment Element.
     * @param {string} opts.fields.billingDetails.address.country Specify 'never' to avoid collecting an address country as part of the billing details in the Payment Element.
     * @param {string} opts.fields.billingDetails.address.postalCode Specify 'never' to avoid collecting an address postal code as part of the billing details in the Payment Element.
     * @param {string} opts.fields.terms The Payment Element automatically displays mandates or other legal agreements when required by the payment method, like SEPA debit. Specify 'never' to never show legal agreements.
     * @param {string} opts.fields.terms.auBecsDebit Specify 'never' to never show legal agreements for the BECS Debit payment method.
     * @param {string} opts.fields.terms.bancontact Specify 'never' to never show legal agreements for the Bancontact payment method.
     * @param {string} opts.fields.terms.card Specify 'never' to never show legal agreements for the credit card payment method.
     * @param {string} opts.fields.terms.ideal Specify 'never' to never show legal agreements for the iDEAL payment method.
     * @param {string} opts.fields.terms.sepaDebit Specify 'never' to never show legal agreements for the SEPA Debit payment method.
     * @param {string} opts.fields.terms.sofort Specify 'never' to never show legal agreements for the SOFORT payment method.
     * @param {string} opts.fields.terms.usBankAccount Specify 'never' to never show legal agreements for the US Bank accounts payment method.
     * @param {string} opts.wallets Specify 'never' to never show digital wallet payment methods like Apple Pay and Google Pay.
     * @param {string} opts.wallets.applePay Specify 'never' to never show the Apple Pay digital wallet payment method.
     * @param {string} opts.wallets.googlePay Specify 'never' to never show the Google Pay digital wallet payment method.
     */
    update (opts) {
      this.element.update(opts);
    },
    // events
    onChange (e) {
      this.$emit('element-change', e);
    },
    onReady (e) {
      this.$emit('element-ready', e);
    },
    onFocus (e) {
      this.$emit('element-focus', e);
    },
    onBlur (e) {
      this.$emit('element-blur', e);
    },
    onEscape (e) {
      this.$emit('element-escape', e);
    },
    onClick (e) {
      this.$emit('element-click', e);
    },
  },
};
<\/script>

<style scoped>
/**
 * The CSS shown here will not be introduced in the Quickstart guide, but shows
 * how you can use CSS to style your Element's container.
 */
.hide {
  display: none;
}
</style>
`] }, media: void 0 });
    };
    var __vue_component__$1 = normalizeComponent({ render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 }, __vue_inject_styles__$1, __vue_script__$1, "data-v-171d7aec", false, void 0, false, createInjector, void 0, void 0);
    var index$3 = { install: function(e, n) {
      var t, r, i, o, s, a, l;
      return regenerator.async(function(c) {
        for (; ; )
          switch (c.prev = c.next) {
            case 0:
              t = n.pk, r = n.stripeAccount, i = n.apiVersion, o = n.locale, s = n.elementsOptions, (a = window.Stripe(t, { stripeAccount: r, apiVersion: i, locale: o })).registerAppInfo(STRIPE_PARTNER_DETAILS), l = a.elements(s), e.prototype.$stripe = a, e.prototype.$stripeElements = l;
            case 6:
            case "end":
              return c.stop();
          }
      });
    } };
    exports.StripeCheckout = index$2, exports.StripeElementCard = __vue_component__, exports.StripeElementPayment = __vue_component__$1, exports.StripeElementsPlugin = index$3, exports.StripePlugin = index;
  }
});
export default require_dist();
/*! Bundled license information:

@vue-stripe/vue-stripe/dist/index.js:
  (**
   * vue-coerce-props v1.0.0
   * (c) 2018 Eduardo San Martin Morote <posva13@gmail.com>
   * @license MIT
   *)
*/
//# sourceMappingURL=@vue-stripe_vue-stripe.js.map
